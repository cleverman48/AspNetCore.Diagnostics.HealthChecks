// <auto-generated />
using System;
using HealthChecks.UI.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthChecks.UI.Core.Data.Migrations
{
    [DbContext(typeof(HealthChecksDb))]
    [Migration("20181012110222_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastExecuted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("OnStateFrom");

                    b.Property<int>("Status");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Executions");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckExecutionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("Duration");

                    b.Property<int?>("HealthCheckExecutionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckExecutionId");

                    b.ToTable("HealthCheckExecutionEntry");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckExecutionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("HealthCheckExecutionId");

                    b.Property<DateTime>("On");

                    b.Property<int>("Status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckExecutionId");

                    b.ToTable("HealthCheckExecutionHistory");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckFailureNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HealthCheckName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsUpAndRunning");

                    b.Property<DateTime>("LastNotified");

                    b.HasKey("Id");

                    b.ToTable("Failures");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckExecutionEntry", b =>
                {
                    b.HasOne("HealthChecks.UI.Core.Data.HealthCheckExecution")
                        .WithMany("Entries")
                        .HasForeignKey("HealthCheckExecutionId");
                });

            modelBuilder.Entity("HealthChecks.UI.Core.Data.HealthCheckExecutionHistory", b =>
                {
                    b.HasOne("HealthChecks.UI.Core.Data.HealthCheckExecution")
                        .WithMany("History")
                        .HasForeignKey("HealthCheckExecutionId");
                });
#pragma warning restore 612, 618
        }
    }
}
