namespace HealthChecks.Kubernetes
{
    public class KubernetesChecksExecutor
    {
        public KubernetesChecksExecutor(k8s.Kubernetes client) { }
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string>> CheckAsync(HealthChecks.Kubernetes.KubernetesResourceCheck resourceCheck, System.Threading.CancellationToken cancellationToken) { }
    }
    public class KubernetesHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public KubernetesHealthCheck(HealthChecks.Kubernetes.KubernetesHealthCheckBuilder builder, HealthChecks.Kubernetes.KubernetesChecksExecutor kubernetesChecksExecutor) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class KubernetesHealthCheckBuilder
    {
        public KubernetesHealthCheckBuilder() { }
        public HealthChecks.Kubernetes.KubernetesHealthCheckOptions WithConfiguration(k8s.KubernetesClientConfiguration configuration) { }
    }
    public class KubernetesHealthCheckOptions
    {
        public HealthChecks.Kubernetes.KubernetesHealthCheckOptions CheckDeployment(string name, System.Func<k8s.Models.V1Deployment, bool> condition, string namespace = "default") { }
        public HealthChecks.Kubernetes.KubernetesHealthCheckOptions CheckPod(string name, System.Func<k8s.Models.V1Pod, bool> condition, string namespace = "default") { }
        public HealthChecks.Kubernetes.KubernetesHealthCheckOptions CheckService(string name, System.Func<k8s.Models.V1Service, bool> condition, string namespace = "default") { }
    }
    public class KubernetesResourceCheck
    {
        public string Name { get; }
        public string Namespace { get; }
        public System.Type ResourceType { get; }
        public bool Check(k8s.IKubernetesObject kubernetesObject) { }
        public static HealthChecks.Kubernetes.KubernetesResourceCheck Create<T>(string name, string @namespace, System.Func<k8s.IKubernetesObject, bool> condition)
            where T : k8s.IKubernetesObject { }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class KubernetesHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddKubernetes(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Action<HealthChecks.Kubernetes.KubernetesHealthCheckBuilder>? setup, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}