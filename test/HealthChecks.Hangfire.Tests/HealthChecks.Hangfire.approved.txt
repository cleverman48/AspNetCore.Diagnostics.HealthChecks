namespace HealthChecks.Hangfire
{
    public class HangfireHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public HangfireHealthCheck(HealthChecks.Hangfire.HangfireOptions hangfireOptions) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class HangfireOptions
    {
        public HangfireOptions() { }
        public int? MaximumJobsFailed { get; set; }
        public int? MinimumAvailableServers { get; set; }
    }
}
namespace Microsoft.Extensions.DependencyInjection
{
    public static class HangfireHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddHangfire(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Action<HealthChecks.Hangfire.HangfireOptions>? setup, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}